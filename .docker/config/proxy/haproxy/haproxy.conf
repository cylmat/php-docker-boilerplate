#########
# HAPROXY
# doc: http://cbonte.github.io/haproxy-dconv/2.2/configuration.html
#
# sample
# https://www.haproxy.com/fr/blog/the-four-essential-sections-of-an-haproxy-configuration/
#   - global, default, frontend, backend

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # global settings here
    maxconn 50000

    ###########
    # Logging #
    ###########
    # Can't log to a file, only log to socket
    # doc: https://www.haproxy.com/fr/blog/introduction-to-haproxy-logging/
    # ref: https://www.cloud-devops.fr/haproxy-activer-les-logs-avec-rsyslog/
    # ref: https://richardhruza.wordpress.com/2017/01/10/configure-logs-for-haproxy/
    #
    # local'X' is syslog facility
    # apt-get install -y rsyslog
    #
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    ###########
    log stdout format raw local0 #send to docker log
    log /dev/log local1 notice #send to syslog
    #chroot /var/lib/haproxy
    stats socket /run/haproxy.admin.sock user root group root mode 660 level admin
    stats timeout 2m
    user root #haproxy
    group root #haproxy
    daemon

    nbproc 2 #or nbthread 4
    cpu-map auto:1/1-4 0-3

    #######
    # SSL #
    #######
     # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.1 no-tls-tickets
    ssl-server-verify none # for localhost self-signed CA

#---------------------------------------------------------------------
# Defaults settings & server
#---------------------------------------------------------------------
defaults
    log global # each frontend use global config

    # defaults here
    mode http   # http|tcp
    option httplog # more verbose
    option dontlognull
    maxconn 3000
    timeout connect 10s
    timeout client 30s
    timeout server 30s
    timeout check 1s
    timeout http-keep-alive 1s
    timeout http-request 10s  # slowloris protection

    # server default options
    default-server maxconn 250 on-error fail-check slowstart 60s inter 1m fastinter 5s downinter 10s weight 100

    # errorfile 400 /etc/haproxy/errors/400.http
    # errorfile 500 /etc/haproxy/errors/500.http
    # errorfile 503 /etc/haproxy/errors/maintenance.http

#############
# User liste
#############
# using crypt() - mcrypt package
#
# openssl passwd -crypt <mypassword>
# php -r "print(crypt('password','JU') . \"\n\");"
# perl -e "print crypt('password','sa');"
# htpasswd -nd user
userlist userliste
    group G1 users vip1,vip2
    user user1 insecure-password user
    user vip1 password k.QM.qdfbg4bqdg
    user vip2 password vBVjWuE3FtNXc #vip2:alpha

userlist userstat
    user stats insecure-password st@!s

userlist acl-admin-list
    group admin_group
    user admin insecure-password adm!n

###################################
#        Frontends                #
# frontend that accepts requests from clients
# main frontend which proxys to the backends
###################################
frontend docker #www.url.com
    bind 0.0.0.0:80-81
    #bind 0.0.0.0:9443 ssl crt /usr/local/etc/haproxy/docker.crtk

    #######
    # set stats at <server>:90/docker-haproxy?stats
    bind :90
    stats uri /docker-haproxy?stats

    option forwardfor except 127.0.0.1
    option forwardfor header X-Real-IP

    #######
    # ACL #
    # https://blog.sleeplessbeastie.eu/2018/03/08/how-to-define-basic-authentication-on-haproxy/
    
    # define stat acl user (for exemple)
    acl url_stats  path_beg -i /stats
    acl url_stats  path_beg -i /stat5.php

    ## -- Specific resource restriction
    acl url_static path_end -i .jpg .gif .png .css .js
    acl network_allowed src 10.21.51.210
    acl restricted_page path_end favicon.ico

    #########
    # HEADERS
    http-request add-header Content-Security-Policy "default-src='self'"
    http-request add-header X-Content-Security-Policy "default-src='self'"
    http-request add-header X-Frame-Options "SAMEORIGIN\ always"
    http-request add-header X-Xss-Protection "1;mode=block"
    http-request add-header X-Content-Type-Options "nosniff"
    http-request add-header Referrer-Policy "strict-origin-when-cross-origin"
    http-request add-header Feature-Policy "vibrate\ 'self'"
    http-request add-header Strict-Transport-Security "max-age=31536000;\ includeSubDomains"
    http-request set-header CustomHost "From HAProxy"

    #######
    # HTTPS
    #http-request add-header X-Forwarded-Proto https
    #http-request redirect scheme https unless { ssl_fc }
    #redirect scheme https if !{ ssl_fc }

    ##########
    # backends at the end
    use_backend stats_server if url_stats #acl url_stats
    use_backend api_servers  if { path_beg /api/ }

    # server
    default_backend web_servers # mandatory otherwise 503


################################
#       backends               #
################################
backend web_servers
    # servers that fulfill the requests
    balance roundrobin
    cookie SERVERUSED insert indirect nocache

    #########
    # CHECK #
    option httpchk GET /
    http-check expect status 200

    # REWRITE
    # http-request set-uri /hello/world 

    default-server check maxconn 20
    server server1 nginx:80 cookie server1 check
    #server server1 nginx:443 cookie server1 check ssl verify none

backend api_servers
    #####
    # ACL
    # specific acl for this backend
    acl devops-auth http_auth_group(acl-admin-list) admin_group #insert into admin group
    http-request auth realm devops unless devops-auth #send auth except for "devops-auth"

    # server
    server server87 nginx:443 cookie server_api1

backend stats_server
    # define acl with "userstat" group
    acl AuthOK http_auth(userstat)
    http-request auth realm stat_auth if !AuthOK

    # server
    server server88 nginx:443 cookie server_stat check ssl verify none

########
# option
# listen = frontend + backend
# enable haproxy stats on <server>:51510/stats
########
listen listen_stats
    bind *:51510
    stats enable
    stats uri /stats
    stats refresh 5s


###################
# ORIGINAL CONFIG
###################
# global
#         log /dev/log    local0
#         log /dev/log    local1 notice
#         chroot /var/lib/haproxy
#         stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
#         stats timeout 30s
#         user haproxy
#         group haproxy
#         daemon

#         # Default SSL material locations
#         ca-base /etc/ssl/certs
#         crt-base /etc/ssl/private
#         ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
#         ssl-default-bind-options no-sslv3

# defaults
#         log     global
#         mode    http
#         option  httplog
#         option  dontlognull
#         timeout connect 5000
#         timeout client  50000
#         timeout server  50000
